// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Employe {
  id       Int    @id @default(autoincrement())
  nom      String
  prenom   String
  adresse  String
  tel      String
  role     Role
  email    String @unique
  password String

  dateCreation DateTime @default(now())

  session    Session? //onetoOne
  tournees   Tournee[]
  traitement Traitement[]
  collectes  Collecte[]
}

model Tournee {
  idTournee    Int          @id @default(autoincrement())
  dateTournee  DateTime     @default(now())
  chauffeur    Employe      @relation(fields: [chauffeurId], references: [id])
  chauffeurId  Int
  typeVehicule TypeVehicule
  remorque     Remorque

  clients TierCollecte[]
}

model TierCollecte {
  idTierCollecte  Int    @id @default(autoincrement())
  nom             String @unique
  adresse         String
  typeEntreprise  String
  scoringFacilite Score
  nomContact      String
  tel             String
  role            Role   @default(CLIENT)
  mail            String @unique
  password        String

  dateCreation DateTime @default(now())

  collecte  Collecte[]
  tournees  Tournee?   @relation(fields: [tourneeId], references: [idTournee])
  tourneeId Int?
  factures  Facture[]
}

model Collecte {
  idNumLot      Int      @id @default(autoincrement())
  quantite      Int
  formeCollecte Forme
  dateCollecte  DateTime @default(now())

  employes     Employe      @relation(fields: [employeId], references: [id])
  TierCollecte TierCollecte @relation(fields: [TierCollecteId], references: [idTierCollecte])
  traitement   Traitement?  @relation(fields: [traitementId], references: [idTraitement])

  TierCollecteId Int
  employeId      Int
  traitementId   Int?
}

model Traitement {
  idTraitement          Int         @id @default(autoincrement())
  dateTraitement        DateTime    @default(now())
  qualite               Qualite
  quantiteCorpsEtranger Int
  scoringBonusMalus     Int
  operateur             Employe     @relation(fields: [operateurId], references: [id])
  operateurId           Int
  collecte              Collecte[]
  Expedition            Expedition? @relation(fields: [expeditionID], references: [idNumBl])
  expeditionID          Int?
}

model Expedition {
  idNumBl        Int      @id @default(autoincrement())
  dateExpedition DateTime @default(now())
  destinataire   String
  numFacture     Facture?
  nbPalette      Int
  poidNetTotal   Float

  traitement    Traitement[]
  tiersCompacte TiersCompacte @relation(fields: [tiersCompacteId], references: [idTiersCompacte])

  tiersCompacteId Int @unique
}

model TiersCompacte {
  idTiersCompacte Int    @id @default(autoincrement())
  nom             String
  adresse         String
  typeTiers       String
  contactNom      String
  tel             String
  mail            String

  expedition Expedition?
  factures   Facture[]
}

model Facture {
  idFacture   Int      @id @default(autoincrement())
  dateFacture DateTime @default(now())
  montant     Float

  nomTierCollecte TierCollecte? @relation(fields: [nomTcId], references: [idTierCollecte])
  nomTcId         Int?

  nomTiersTompacte TiersCompacte? @relation(fields: [nomTcomId], references: [idTiersCompacte])
  nomTcomId        Int?

  num_expedition Expedition @relation(fields: [numExpId], references: [idNumBl])
  numExpId       Int        @unique
}

enum Role {
  CLIENT
  ADMIN
  OPERATEUR
  CHAUFFEUR
}

enum Remorque {
  OUI
  NON
}

enum Score {
  UN
  DEUX
  TROIS
}

enum Qualite {
  PURE
  POLLUEE
  NONRECYCLABLE
}

enum Forme {
  SAC
  VRAC
  PALETTE
}

enum TypeVehicule {
  FOURGON
  NONARTICULE
  SEMIREMORQUE
}

model Session {
  id     String  @id @default(uuid())
  user   Employe @relation(fields: [userId], references: [id]) //relation oneToOne
  userId Int     @unique
}
