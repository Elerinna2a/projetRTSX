// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Employe {
  id        Int      @id @default(autoincrement())
  nom       String
  prenom    String
  adresse   String
  tel       String
  role      Role
  email     String   @unique
  password  String
  createdAt DateTime @default(now())

  // Relations
  session     Session? // One-to-one
  collectes   Collecte[] // One-to-many
  tournees    Tournee[] // One-to-many
  traitements Traitement[] // One-to-many
}

model Tournee {
  idTournee    Int          @id @default(autoincrement())
  dateTournee  String
  typeVehicule TypeVehicule
  remorque     Remorque

  chauffeur      Employe?      @relation(fields: [chauffeurId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  chauffeurId    Int?
  tierCollecte   TierCollecte? @relation(fields: [tierCollecteId], references: [idTierCollecte], onDelete: SetNull, onUpdate: Cascade)
  tierCollecteId Int?
}

model TierCollecte {
  idTierCollecte  Int      @id @default(autoincrement())
  nom             String
  adresse         String
  typeEntreprise  String
  scoringFacilite Score
  nomContact      String
  tel             String
  role            Role     @default(CLIENT)
  mail            String   @unique
  password        String
  dateCreation    DateTime @default(now())

  // Relations
  collectes Collecte[] // One-to-many
  tournees  Tournee[] // One-to-many
  factures  Facture[] // One-to-many
}

model Collecte {
  idNumLot        Int    @id @default(autoincrement())
  quantite        Int
  formeCollecte   Forme
  dateCollecte    String
  nomTierCollecte String

  // Relations
  employe        Employe?      @relation(fields: [employeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  employeId      Int?
  tierCollecte   TierCollecte? @relation(fields: [tiercollecteId], references: [idTierCollecte], onDelete: SetNull, onUpdate: Cascade)
  tiercollecteId Int?
  traitement     Traitement?   @relation(fields: [traitementId], references: [idTraitement], onDelete: SetNull, onUpdate: Cascade)
  traitementId   Int?
}

model Traitement {
  idTraitement          Int     @id @default(autoincrement())
  dateTraitement        String
  qualite               Qualite
  quantiteCorpsEtranger Int
  scoringBonusMalus     Int

  operateur    Employe?    @relation(fields: [operateurId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  operateurId  Int?
  collecte     Collecte[]
  expedition   Expedition? @relation(fields: [expeditionId], references: [idNumBl], onDelete: SetNull, onUpdate: Cascade)
  expeditionId Int?
}

model Expedition {
  idNumBl        Int    @id @default(autoincrement())
  dateExpedition String
  destinataire   String
  nbPalette      Int
  poidNetTotal   Float

  // Relations
  traitementId    Traitement[]
  tiersCompacte   TiersCompacte? @relation(fields: [tiersCompacteId], references: [idTiersCompacte], onDelete: SetNull, onUpdate: Cascade)
  tiersCompacteId Int?
}

model TiersCompacte {
  idTiersCompacte Int    @id @default(autoincrement())
  nom             String
  adresse         String
  typeTiers       String
  contactNom      String
  tel             String
  mail            String

  expedition Expedition[]
  factures   Facture[]
}

model Facture {
  idFacture           Int    @id @default(autoincrement())
  dateFacture         String
  montant             Float
  datePaiementFacture String

  // Relations
  tiersCollecte   TierCollecte?  @relation(fields: [tiersCollecteId], references: [idTierCollecte], onDelete: SetNull, onUpdate: Cascade)
  tiersCollecteId Int?
  tiersCompacte   TiersCompacte? @relation(fields: [tierCompacteId], references: [idTiersCompacte], onDelete: SetNull, onUpdate: Cascade)
  tierCompacteId  Int?
}

enum Role {
  CLIENT
  ADMIN
  OPERATEUR
  CHAUFFEUR
}

enum Remorque {
  OUI
  NON
}

enum Score {
  UN
  DEUX
  TROIS
}

enum Qualite {
  PURE
  POLLUEE
  NONRECYCLABLE
}

enum Forme {
  SAC
  VRAC
  PALETTE
}

enum TypeVehicule {
  FOURGON
  NONARTICULE
  SEMIREMORQUE
}

model Session {
  id        String  @id @default(uuid())
  employe   Employe @relation(fields: [employeId], references: [id]) //relation oneToOne
  employeId Int     @unique
}
