// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Employe {
  id       Int    @id @default(autoincrement())
  nom      String
  prenom   String
  adresse  String
  tel      String
  role     Role
  email    String @unique
  password String

  dateCreation DateTime @default(now())

  session Session? //onetoOne

  collecte Collecte[]

  tournees Tournee?

  traitements  Traitement? @relation(fields: [traitementId], references: [idTraitement])
  traitementId Int?
}

model Tournee {
  idTournee   Int      @id @default(autoincrement())
  dateTournee DateTime @default(now())

  chauffeur   Employe @relation(fields: [chauffeurId], references: [id])
  chauffeurId Int     @unique

  typeVehicule TypeVehicule
  remorque     Remorque

  tierCollecte TierCollecte[]
}

model TierCollecte {
  idTierCollecte  Int    @id @default(autoincrement())
  nom             String @unique
  adresse         String
  typeEntreprise  String
  scoringFacilite Score
  nomContact      String
  tel             String
  role            Role   @default(CLIENT)
  mail            String @unique
  password        String

  dateCreation String

  collecte   Collecte? @relation(fields: [collecteId], references: [idNumLot])
  collecteId Int?
  tournees   Tournee[]
  factures   Facture?  @relation(fields: [factureId], references: [idFacture])
  factureId  Int?
}

model Collecte {
  idNumLot        Int    @id @default(autoincrement())
  quantite        Int
  formeCollecte   Forme
  dateCollecte    String
  nomTierCollecte String

  employe   Employe? @relation(fields: [employeId], references: [id])
  employeId Int?

  TierCollecte TierCollecte[]
  traitement   Traitement?    @relation(fields: [traitementId], references: [idTraitement])
  traitementId Int?
}

model Traitement {
  idTraitement          Int          @id @default(autoincrement())
  dateTraitement        String
  qualite               Qualite
  quantiteCorpsEtranger Int
  scoringBonusMalus     Int
  operateur             Employe[]
  collecte              Collecte[]
  Expedition            Expedition[]
}

model Expedition {
  idNumBl        Int    @id @default(autoincrement())
  dateExpedition String
  destinataire   String
  nbPalette      Int
  poidNetTotal   Float

  // relation one to many vers traitement
  traitement      Traitement    @relation(fields: [traitementId], references: [idTraitement])
  traitementId    Int
  // relation one to many vers tierCompacte
  tiersCompacte   TiersCompacte @relation(fields: [tiersCompacteId], references: [idTiersCompacte])
  tiersCompacteId Int           @unique
  // relation one to many vers Factures
  numFacture      Facture?      @relation(fields: [factureId], references: [idFacture])
  factureId       Int?
}

model TiersCompacte {
  idTiersCompacte Int    @id @default(autoincrement())
  nom             String
  adresse         String
  typeTiers       String
  contactNom      String
  tel             String
  mail            String

  expedition Expedition?
  factures   Facture[]
}

model Facture {
  idFacture   Int    @id @default(autoincrement())
  dateFacture String
  montant     Float

  nomTierCollecte  TierCollecte[]
  nomTiersTompacte TiersCompacte[]
  num_expedition   Expedition[]
}

enum Role {
  CLIENT
  ADMIN
  OPERATEUR
  CHAUFFEUR
}

enum Remorque {
  OUI
  NON
}

enum Score {
  UN
  DEUX
  TROIS
}

enum Qualite {
  PURE
  POLLUEE
  NONRECYCLABLE
}

enum Forme {
  SAC
  VRAC
  PALETTE
}

enum TypeVehicule {
  FOURGON
  NONARTICULE
  SEMIREMORQUE
}

model Session {
  id        String  @id @default(uuid())
  employe   Employe @relation(fields: [employeId], references: [id]) //relation oneToOne
  employeId Int     @unique
}
